// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.24.4
// source: v1/api.proto

package v1

import (
protoreflect "google.golang.org/protobuf/reflect/protoreflect"
protoimpl "google.golang.org/protobuf/runtime/protoimpl"
reflect "reflect"
sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Quality levels
type Quality int32

const (
	Quality_QUALITY_UNSPECIFIED Quality = 0 // Defaults to 'DRAFT' quality.
	Quality_QUALITY_LOW         Quality = 1
	Quality_QUALITY_DRAFT       Quality = 2
	Quality_QUALITY_MEDIUM      Quality = 3
	Quality_QUALITY_HIGH        Quality = 4
	Quality_QUALITY_PREMIUM     Quality = 5
)

// Enum value maps for Quality.
var (
	Quality_name = map[int32]string{
		0: "QUALITY_UNSPECIFIED",
		1: "QUALITY_LOW",
		2: "QUALITY_DRAFT",
		3: "QUALITY_MEDIUM",
		4: "QUALITY_HIGH",
		5: "QUALITY_PREMIUM",
	}
	Quality_value = map[string]int32{
		"QUALITY_UNSPECIFIED": 0,
		"QUALITY_LOW":         1,
		"QUALITY_DRAFT":       2,
		"QUALITY_MEDIUM":      3,
		"QUALITY_HIGH":        4,
		"QUALITY_PREMIUM":     5,
	}
)

func (x Quality) Enum() *Quality {
	p := new(Quality)
	*p = x
	return p
}

func (x Quality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Quality) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_api_proto_enumTypes[0].Descriptor()
}

func (Quality) Type() protoreflect.EnumType {
	return &file_v1_api_proto_enumTypes[0]
}

func (x Quality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Quality.Descriptor instead.
func (Quality) EnumDescriptor() ([]byte, []int) {
	return file_v1_api_proto_rawDescGZIP(), []int{0}
}

// Status codes.
type Code int32

const (
	Code_CODE_UNSPECIFIED Code = 0
	Code_CODE_COMPLETE    Code = 1
	Code_CODE_IN_PROGRESS Code = 2
	Code_CODE_CANCELED    Code = 3
	Code_CODE_ERROR       Code = 4
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0: "CODE_UNSPECIFIED",
		1: "CODE_COMPLETE",
		2: "CODE_IN_PROGRESS",
		3: "CODE_CANCELED",
		4: "CODE_ERROR",
	}
	Code_value = map[string]int32{
		"CODE_UNSPECIFIED": 0,
		"CODE_COMPLETE":    1,
		"CODE_IN_PROGRESS": 2,
		"CODE_CANCELED":    3,
		"CODE_ERROR":       4,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_api_proto_enumTypes[1].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_v1_api_proto_enumTypes[1]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_v1_api_proto_rawDescGZIP(), []int{1}
}

// Audio formats.
type Format int32

const (
	Format_FORMAT_RAW   Format = 0 // Default value, PCM_FP32 (model native).
	Format_FORMAT_MP3   Format = 1 // 128kbps MP3
	Format_FORMAT_WAV   Format = 2 // 16-bit (uint16) PCM
	Format_FORMAT_OGG   Format = 3 // 80kbps OGG Vorbis
	Format_FORMAT_FLAC  Format = 4 // 16-bit (int16) FLAC
	Format_FORMAT_MULAW Format = 5 // 8-bit (uint8) PCM headerless
)

// Enum value maps for Format.
var (
	Format_name = map[int32]string{
		0: "FORMAT_RAW",
		1: "FORMAT_MP3",
		2: "FORMAT_WAV",
		3: "FORMAT_OGG",
		4: "FORMAT_FLAC",
		5: "FORMAT_MULAW",
	}
	Format_value = map[string]int32{
		"FORMAT_RAW":   0,
		"FORMAT_MP3":   1,
		"FORMAT_WAV":   2,
		"FORMAT_OGG":   3,
		"FORMAT_FLAC":  4,
		"FORMAT_MULAW": 5,
	}
)

func (x Format) Enum() *Format {
	p := new(Format)
	*p = x
	return p
}

func (x Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Format) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_api_proto_enumTypes[2].Descriptor()
}

func (Format) Type() protoreflect.EnumType {
	return &file_v1_api_proto_enumTypes[2]
}

func (x Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Format.Descriptor instead.
func (Format) EnumDescriptor() ([]byte, []int) {
	return file_v1_api_proto_rawDescGZIP(), []int{2}
}

type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Token []byte `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_v1_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_v1_api_proto_rawDescGZIP(), []int{0}
}

func (x *Credentials) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Credentials) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    Code     `protobuf:"varint,1,opt,name=code,proto3,enum=playht.v1.Code" json:"code,omitempty"`
	Message []string `protobuf:"bytes,2,rep,name=message,proto3" json:"message,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_v1_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_v1_api_proto_rawDescGZIP(), []int{1}
}

func (x *Status) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_CODE_UNSPECIFIED
}

func (x *Status) GetMessage() []string {
	if x != nil {
		return x.Message
	}
	return nil
}

type TtsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text to be synthesized.
	Text []string `protobuf:"bytes,1,rep,name=text,proto3" json:"text,omitempty"`
	// Voice to be used.
	Voice string `protobuf:"bytes,2,opt,name=voice,proto3" json:"voice,omitempty"`
	// Quality of the generated audio.
	Quality *Quality `protobuf:"varint,3,opt,name=quality,proto3,enum=playht.v1.Quality,oneof" json:"quality,omitempty"`
	// Audio format to return.
	Format *Format `protobuf:"varint,4,opt,name=format,proto3,enum=playht.v1.Format,oneof" json:"format,omitempty"`
	// Sample rate to return in hz. Native sample rate is 24000 hz (default).
	SampleRate *int32 `protobuf:"varint,5,opt,name=sample_rate,json=sampleRate,proto3,oneof" json:"sample_rate,omitempty"`
	// Speaking rate, 1.0 (default) is normal speed.
	Speed *float32 `protobuf:"fixed32,6,opt,name=speed,proto3,oneof" json:"speed,omitempty"`
	// Seed for random number generator. If unspecified, a random seed is used.
	Seed *int32 `protobuf:"varint,7,opt,name=seed,proto3,oneof" json:"seed,omitempty"`
	// Model sampling temperature, 1.1 is default.
	Temperature *float32 `protobuf:"fixed32,8,opt,name=temperature,proto3,oneof" json:"temperature,omitempty"`
	// Model probability mass sampling threshold, 0.85 is default.
	TopP *float32 `protobuf:"fixed32,9,opt,name=top_p,json=topP,proto3,oneof" json:"top_p,omitempty"`
	// Default is 1.0
	StyleGuidance *float32 `protobuf:"fixed32,10,opt,name=style_guidance,json=styleGuidance,proto3,oneof" json:"style_guidance,omitempty"`
	// Default is 2.0
	VoiceGuidance *float32 `protobuf:"fixed32,11,opt,name=voice_guidance,json=voiceGuidance,proto3,oneof" json:"voice_guidance,omitempty"`
	// Default is -1
	AudioSource *int32 `protobuf:"varint,12,opt,name=audio_source,json=audioSource,proto3,oneof" json:"audio_source,omitempty"`
	// default is 36
	SpeakerAttributes *int32 `protobuf:"varint,13,opt,name=speaker_attributes,json=speakerAttributes,proto3,oneof" json:"speaker_attributes,omitempty"`
	// Default is -1
	SpeechAttributes *int32 `protobuf:"varint,14,opt,name=speech_attributes,json=speechAttributes,proto3,oneof" json:"speech_attributes,omitempty"`
	// Default is -1
	LanguageIdentifier *int32 `protobuf:"varint,15,opt,name=language_identifier,json=languageIdentifier,proto3,oneof" json:"language_identifier,omitempty"`
	// Default is 1.0
	TextGuidance *float32 `protobuf:"fixed32,16,opt,name=text_guidance,json=textGuidance,proto3,oneof" json:"text_guidance,omitempty"`
	// JSON string with other various parameters.
	Other *string `protobuf:"bytes,99,opt,name=other,proto3,oneof" json:"other,omitempty"`
}

func (x *TtsParams) Reset() {
	*x = TtsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TtsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TtsParams) ProtoMessage() {}

func (x *TtsParams) ProtoReflect() protoreflect.Message {
	mi := &file_v1_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TtsParams.ProtoReflect.Descriptor instead.
func (*TtsParams) Descriptor() ([]byte, []int) {
	return file_v1_api_proto_rawDescGZIP(), []int{2}
}

func (x *TtsParams) GetText() []string {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *TtsParams) GetVoice() string {
	if x != nil {
		return x.Voice
	}
	return ""
}

func (x *TtsParams) GetQuality() Quality {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return Quality_QUALITY_UNSPECIFIED
}

func (x *TtsParams) GetFormat() Format {
	if x != nil && x.Format != nil {
		return *x.Format
	}
	return Format_FORMAT_RAW
}

func (x *TtsParams) GetSampleRate() int32 {
	if x != nil && x.SampleRate != nil {
		return *x.SampleRate
	}
	return 0
}

func (x *TtsParams) GetSpeed() float32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

func (x *TtsParams) GetSeed() int32 {
	if x != nil && x.Seed != nil {
		return *x.Seed
	}
	return 0
}

func (x *TtsParams) GetTemperature() float32 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

func (x *TtsParams) GetTopP() float32 {
	if x != nil && x.TopP != nil {
		return *x.TopP
	}
	return 0
}

func (x *TtsParams) GetStyleGuidance() float32 {
	if x != nil && x.StyleGuidance != nil {
		return *x.StyleGuidance
	}
	return 0
}

func (x *TtsParams) GetVoiceGuidance() float32 {
	if x != nil && x.VoiceGuidance != nil {
		return *x.VoiceGuidance
	}
	return 0
}

func (x *TtsParams) GetAudioSource() int32 {
	if x != nil && x.AudioSource != nil {
		return *x.AudioSource
	}
	return 0
}

func (x *TtsParams) GetSpeakerAttributes() int32 {
	if x != nil && x.SpeakerAttributes != nil {
		return *x.SpeakerAttributes
	}
	return 0
}

func (x *TtsParams) GetSpeechAttributes() int32 {
	if x != nil && x.SpeechAttributes != nil {
		return *x.SpeechAttributes
	}
	return 0
}

func (x *TtsParams) GetLanguageIdentifier() int32 {
	if x != nil && x.LanguageIdentifier != nil {
		return *x.LanguageIdentifier
	}
	return 0
}

func (x *TtsParams) GetTextGuidance() float32 {
	if x != nil && x.TextGuidance != nil {
		return *x.TextGuidance
	}
	return 0
}

func (x *TtsParams) GetOther() string {
	if x != nil && x.Other != nil {
		return *x.Other
	}
	return ""
}

type TtsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User ID, Lease Token
	Lease  []byte     `protobuf:"bytes,1,opt,name=lease,proto3" json:"lease,omitempty"`
	Params *TtsParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *TtsRequest) Reset() {
	*x = TtsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TtsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TtsRequest) ProtoMessage() {}

func (x *TtsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TtsRequest.ProtoReflect.Descriptor instead.
func (*TtsRequest) Descriptor() ([]byte, []int) {
	return file_v1_api_proto_rawDescGZIP(), []int{3}
}

func (x *TtsRequest) GetLease() []byte {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (x *TtsRequest) GetParams() *TtsParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type TtsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence int32   `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Id       string  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Data     []byte  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Status   *Status `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TtsResponse) Reset() {
	*x = TtsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TtsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TtsResponse) ProtoMessage() {}

func (x *TtsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TtsResponse.ProtoReflect.Descriptor instead.
func (*TtsResponse) Descriptor() ([]byte, []int) {
	return file_v1_api_proto_rawDescGZIP(), []int{4}
}

func (x *TtsResponse) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *TtsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TtsResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TtsResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_v1_api_proto protoreflect.FileDescriptor

var file_v1_api_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x68, 0x74, 0x2e, 0x76, 0x31, 0x22, 0x33, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x47,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x68, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x86, 0x07, 0x0a, 0x09, 0x54, 0x74, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12,
	0x31, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x68, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x68, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x01, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x04, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x05, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x06, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x50, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x0d, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x47, 0x75,
	0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x08, 0x52, 0x0d, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0b, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x12, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x11, 0x73, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x10,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x0c, 0x52, 0x12, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x0d, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x63, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0e, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x70,
	0x5f, 0x70, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x67, 0x75, 0x69,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x70,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12,
	0x22, 0x50, 0x0a, 0x0a, 0x54, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x68, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x74, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x78, 0x0a, 0x0b, 0x54, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x68, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x81, 0x01, 0x0a,
	0x07, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x55, 0x41, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x52,
	0x41, 0x46, 0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x55, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x51,
	0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x10, 0x05,
	0x2a, 0x68, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0x6b, 0x0a, 0x06, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52,
	0x41, 0x57, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4d,
	0x50, 0x33, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x57,
	0x41, 0x56, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4f,
	0x47, 0x47, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x46,
	0x4c, 0x41, 0x43, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f,
	0x4d, 0x55, 0x4c, 0x41, 0x57, 0x10, 0x05, 0x32, 0x3d, 0x0a, 0x03, 0x54, 0x74, 0x73, 0x12, 0x36,
	0x0a, 0x03, 0x54, 0x74, 0x73, 0x12, 0x15, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x68, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70,
	0x6c, 0x61, 0x79, 0x68, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x2f,
	0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x68,
	0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_api_proto_rawDescOnce sync.Once
	file_v1_api_proto_rawDescData = file_v1_api_proto_rawDesc
)

func file_v1_api_proto_rawDescGZIP() []byte {
	file_v1_api_proto_rawDescOnce.Do(func() {
		file_v1_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_api_proto_rawDescData)
	})
	return file_v1_api_proto_rawDescData
}

var file_v1_api_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_v1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_v1_api_proto_goTypes = []interface{}{
	(Quality)(0),        // 0: playht.v1.Quality
	(Code)(0),           // 1: playht.v1.Code
	(Format)(0),         // 2: playht.v1.Format
	(*Credentials)(nil), // 3: playht.v1.Credentials
	(*Status)(nil),      // 4: playht.v1.Status
	(*TtsParams)(nil),   // 5: playht.v1.TtsParams
	(*TtsRequest)(nil),  // 6: playht.v1.TtsRequest
	(*TtsResponse)(nil), // 7: playht.v1.TtsResponse
}
var file_v1_api_proto_depIdxs = []int32{
	1, // 0: playht.v1.Status.code:type_name -> playht.v1.Code
	0, // 1: playht.v1.TtsParams.quality:type_name -> playht.v1.Quality
	2, // 2: playht.v1.TtsParams.format:type_name -> playht.v1.Format
	5, // 3: playht.v1.TtsRequest.params:type_name -> playht.v1.TtsParams
	4, // 4: playht.v1.TtsResponse.status:type_name -> playht.v1.Status
	6, // 5: playht.v1.Tts.Tts:input_type -> playht.v1.TtsRequest
	7, // 6: playht.v1.Tts.Tts:output_type -> playht.v1.TtsResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_v1_api_proto_init() }
func file_v1_api_proto_init() {
	if File_v1_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TtsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TtsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TtsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_api_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_api_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_api_proto_goTypes,
		DependencyIndexes: file_v1_api_proto_depIdxs,
		EnumInfos:         file_v1_api_proto_enumTypes,
		MessageInfos:      file_v1_api_proto_msgTypes,
	}.Build()
	File_v1_api_proto = out.File
	file_v1_api_proto_rawDesc = nil
	file_v1_api_proto_goTypes = nil
	file_v1_api_proto_depIdxs = nil
}